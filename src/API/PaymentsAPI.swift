//
// PaymentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PaymentsAPI {

    /**
     Capturar un pago autorizado
     
     - parameter orderToken: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter captureRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func capture(orderToken: String, xApiKey: String? = nil, captureRequest: CaptureRequest? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return captureWithRequestBuilder(orderToken: orderToken, xApiKey: xApiKey, captureRequest: captureRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Capturar un pago autorizado
     - POST /merchants/orders/{order_token}/capture
     - La opción de **capturar un pago autorizado** te permite completar una transacción con estado **authorized**. Una transaccion esta en estado  **authorized** cuando se reservaron los fondos necesarios para dicha transacción.
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter orderToken: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter captureRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func captureWithRequestBuilder(orderToken: String, xApiKey: String? = nil, captureRequest: CaptureRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/merchants/orders/{order_token}/capture"
        let orderTokenPreEscape = "\(APIHelper.mapValueToPathItem(orderToken))"
        let orderTokenPostEscape = orderTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{order_token}", with: orderTokenPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: captureRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = DeUnaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Métodos de pago
     
     - parameter orderToken: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMerchantsPaymentsMethods(orderToken: String, xApiKey: String? = nil, authorization: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: GetMerchantsPaymentsMethods200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMerchantsPaymentsMethodsWithRequestBuilder(orderToken: orderToken, xApiKey: xApiKey, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Métodos de pago
     - GET /merchants/orders/{order_token}/payments-methods
     - Obtiene los métodos disponibles que tiene el comercio para esa orden en específico
     - Bearer Token:
       - type: http
       - name: Authorization
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter orderToken: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - returns: RequestBuilder<GetMerchantsPaymentsMethods200Response> 
     */
    open class func getMerchantsPaymentsMethodsWithRequestBuilder(orderToken: String, xApiKey: String? = nil, authorization: String? = nil) -> RequestBuilder<GetMerchantsPaymentsMethods200Response> {
        var localVariablePath = "/merchants/orders/{order_token}/payments-methods"
        let orderTokenPreEscape = "\(APIHelper.mapValueToPathItem(orderToken))"
        let orderTokenPostEscape = orderTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{order_token}", with: orderTokenPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMerchantsPaymentsMethods200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Payment methods campos específicos
     
     - parameter authorization: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPaymentMethods(authorization: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: GetPaymentMethods200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getPaymentMethodsWithRequestBuilder(authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Payment methods campos específicos
     - GET /transactions/payments-methods
     - Obtén los métodos de pago asociados al comercio y su respectiva información adicional requerida.
     - Bearer Token:
       - type: http
       - name: Authorization
     - parameter authorization: (header)  (optional)
     - returns: RequestBuilder<GetPaymentMethods200Response> 
     */
    open class func getPaymentMethodsWithRequestBuilder(authorization: String? = nil) -> RequestBuilder<GetPaymentMethods200Response> {
        let localVariablePath = "/transactions/payments-methods"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetPaymentMethods200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Realizar pago de orden
     
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter xDeviceId: (header)  (optional)
     - parameter xSessionId: (header)  (optional)
     - parameter purchaseRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purchase(xApiKey: String? = nil, authorization: String? = nil, xDeviceId: String? = nil, xSessionId: String? = nil, purchaseRequest: PurchaseRequest? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Purchase200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return purchaseWithRequestBuilder(xApiKey: xApiKey, authorization: authorization, xDeviceId: xDeviceId, xSessionId: xSessionId, purchaseRequest: purchaseRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Realizar pago de orden
     - POST /merchants/transactions/purchase
     - Realiza el pago de la orden. Para los procesadores previamente configurados, al momento de hacer el pago, en la respuesta el atributo 'status' cambiará a 'authorized'  indicando que dicha transacción esta pendiente para realizar una captura o anulación, según sea el caso.
     - Bearer Token:
       - type: http
       - name: Authorization
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter xDeviceId: (header)  (optional)
     - parameter xSessionId: (header)  (optional)
     - parameter purchaseRequest: (body)  (optional)
     - returns: RequestBuilder<Purchase200Response> 
     */
    open class func purchaseWithRequestBuilder(xApiKey: String? = nil, authorization: String? = nil, xDeviceId: String? = nil, xSessionId: String? = nil, purchaseRequest: PurchaseRequest? = nil) -> RequestBuilder<Purchase200Response> {
        let localVariablePath = "/merchants/transactions/purchase"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: purchaseRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
            "Authorization": authorization?.encodeToJSON(),
            "X-Device-Id": xDeviceId?.encodeToJSON(),
            "X-Session-Id": xSessionId?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Purchase200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Verificar pago con OTP
     
     - parameter orderToken: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter verifyPaymentOtpRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func verifyPaymentOtp(orderToken: String, xApiKey: String? = nil, authorization: String? = nil, verifyPaymentOtpRequest: VerifyPaymentOtpRequest? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: OrderToken200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return verifyPaymentOtpWithRequestBuilder(orderToken: orderToken, xApiKey: xApiKey, authorization: authorization, verifyPaymentOtpRequest: verifyPaymentOtpRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Verificar pago con OTP
     - POST /merchants/orders/{order_token}/transactions/verify
     - Verificar el pago con el código OTP 
     - Bearer Token:
       - type: http
       - name: Authorization
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter orderToken: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter verifyPaymentOtpRequest: (body)  (optional)
     - returns: RequestBuilder<OrderToken200Response> 
     */
    open class func verifyPaymentOtpWithRequestBuilder(orderToken: String, xApiKey: String? = nil, authorization: String? = nil, verifyPaymentOtpRequest: VerifyPaymentOtpRequest? = nil) -> RequestBuilder<OrderToken200Response> {
        var localVariablePath = "/merchants/orders/{order_token}/transactions/verify"
        let orderTokenPreEscape = "\(APIHelper.mapValueToPathItem(orderToken))"
        let orderTokenPostEscape = orderTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{order_token}", with: orderTokenPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyPaymentOtpRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderToken200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
