//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     Crear nueva dirección para el usuario
     
     - parameter userId: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter createAddressRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createAddress(userId: String, xApiKey: String? = nil, createAddressRequest: CreateAddressRequest? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: CreateAddress200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createAddressWithRequestBuilder(userId: userId, xApiKey: xApiKey, createAddressRequest: createAddressRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Crear nueva dirección para el usuario
     - POST /users/{user_id}/addresses
     - Permite crear una dirección para el usuario
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter userId: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter createAddressRequest: (body)  (optional)
     - returns: RequestBuilder<CreateAddress200Response> 
     */
    open class func createAddressWithRequestBuilder(userId: String, xApiKey: String? = nil, createAddressRequest: CreateAddressRequest? = nil) -> RequestBuilder<CreateAddress200Response> {
        var localVariablePath = "/users/{user_id}/addresses"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createAddressRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateAddress200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove card by identifier
     
     - parameter userId: (path)  
     - parameter cardId: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteUserCardById(userId: String, cardId: String, xApiKey: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteUserCardByIdWithRequestBuilder(userId: userId, cardId: cardId, xApiKey: xApiKey).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove card by identifier
     - DELETE /users/{user_id}/cards/{card_id}
     - Remove card by identifier
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter userId: (path)  
     - parameter cardId: (path)  
     - parameter xApiKey: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserCardByIdWithRequestBuilder(userId: String, cardId: String, xApiKey: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/users/{user_id}/cards/{card_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let cardIdPreEscape = "\(APIHelper.mapValueToPathItem(cardId))"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = DeUnaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Eliminar dirección
     
     - parameter userId: (path)  
     - parameter addressId: (path)  
     - parameter authorization: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteUsersAddress(userId: String, addressId: String, authorization: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteUsersAddressWithRequestBuilder(userId: userId, addressId: addressId, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Eliminar dirección
     - DELETE /users/{user_id}/addresses/{address_id}
     - Permite eliminar una dirección del usuario dado su identificador 
     - Bearer Token:
       - type: http
       - name: Authorization
     - parameter userId: (path)  
     - parameter addressId: (path)  
     - parameter authorization: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUsersAddressWithRequestBuilder(userId: String, addressId: String, authorization: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/users/{user_id}/addresses/{address_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let addressIdPreEscape = "\(APIHelper.mapValueToPathItem(addressId))"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address_id}", with: addressIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = DeUnaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Eliminar Usuario
     
     - parameter userId: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteUsersUserId(userId: String, xApiKey: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteUsersUserIdWithRequestBuilder(userId: userId, xApiKey: xApiKey).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Eliminar Usuario
     - DELETE /users/{user_id}
     - Permite eliminar un usuario de la red DEUNA.
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter userId: (path)  
     - parameter xApiKey: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUsersUserIdWithRequestBuilder(userId: String, xApiKey: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/users/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = DeUnaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit User
     
     - parameter userId: (path)  
     - parameter registerUserRequest: (body) Ejemplo de requestBody 
     - parameter xApiKey: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func editUser(userId: String, registerUserRequest: RegisterUserRequest, xApiKey: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return editUserWithRequestBuilder(userId: userId, registerUserRequest: registerUserRequest, xApiKey: xApiKey).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit User
     - PATCH /users/{user_id}
     - Editing User
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter userId: (path)  
     - parameter registerUserRequest: (body) Ejemplo de requestBody 
     - parameter xApiKey: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func editUserWithRequestBuilder(userId: String, registerUserRequest: RegisterUserRequest, xApiKey: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/users/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = DeUnaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Iniciar sesión - autorización externa
     
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func externalAuthorize(xApiKey: String? = nil, authorization: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: ExternalAuthorize200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return externalAuthorizeWithRequestBuilder(xApiKey: xApiKey, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Iniciar sesión - autorización externa
     - POST /users/external-authorize
     - Entregar de forma segura un token autorizado por DEUNA ONE y el cliente.
     - Bearer Token:
       - type: http
       - name: Authorization
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - returns: RequestBuilder<ExternalAuthorize200Response> 
     */
    open class func externalAuthorizeWithRequestBuilder(xApiKey: String? = nil, authorization: String? = nil) -> RequestBuilder<ExternalAuthorize200Response> {
        let localVariablePath = "/users/external-authorize"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExternalAuthorize200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Actualizar token
     
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func externalAuthorizeRefresh(xApiKey: String? = nil, authorization: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: ExternalAuthorizeRefresh200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return externalAuthorizeRefreshWithRequestBuilder(xApiKey: xApiKey, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Actualizar token
     - POST /users/authorize
     - Obtener un nuevo token de forma segura a partir de un refresh_token autorizado por DEUNA ONE y el cliente.
     - Bearer Token:
       - type: http
       - name: Authorization
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - returns: RequestBuilder<ExternalAuthorizeRefresh200Response> 
     */
    open class func externalAuthorizeRefreshWithRequestBuilder(xApiKey: String? = nil, authorization: String? = nil) -> RequestBuilder<ExternalAuthorizeRefresh200Response> {
        let localVariablePath = "/users/authorize"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExternalAuthorizeRefresh200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Obtener todas direcciones del usuario
     
     - parameter userId: (path)  
     - parameter authorization: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserAddresses(userId: String, authorization: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: GetUserAddresses200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserAddressesWithRequestBuilder(userId: userId, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Obtener todas direcciones del usuario
     - GET /users/{user_id}/addresses
     - 
     - Bearer Token:
       - type: http
       - name: Authorization
     - parameter userId: (path)  
     - parameter authorization: (header)  (optional)
     - returns: RequestBuilder<GetUserAddresses200Response> 
     */
    open class func getUserAddressesWithRequestBuilder(userId: String, authorization: String? = nil) -> RequestBuilder<GetUserAddresses200Response> {
        var localVariablePath = "/users/{user_id}/addresses"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserAddresses200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Obtain a card by its identifier.
     
     - parameter userId: (path)  
     - parameter cardId: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserCardById(userId: String, cardId: String, xApiKey: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: GetUserCardById200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserCardByIdWithRequestBuilder(userId: userId, cardId: cardId, xApiKey: xApiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Obtain a card by its identifier.
     - GET /users/{user_id}/cards/{card_id}
     - Obtain a card by its identifier.
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter userId: (path)  
     - parameter cardId: (path)  
     - parameter xApiKey: (header)  (optional)
     - returns: RequestBuilder<GetUserCardById200Response> 
     */
    open class func getUserCardByIdWithRequestBuilder(userId: String, cardId: String, xApiKey: String? = nil) -> RequestBuilder<GetUserCardById200Response> {
        var localVariablePath = "/users/{user_id}/cards/{card_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let cardIdPreEscape = "\(APIHelper.mapValueToPathItem(cardId))"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserCardById200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all user cards
     
     - parameter userId: (path)  
     - parameter xApiKey: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserCards(userId: String, xApiKey: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: GetUserCards200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserCardsWithRequestBuilder(userId: userId, xApiKey: xApiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all user cards
     - GET /users/{user_id}/cards
     - Get all user cards
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter userId: (path)  
     - parameter xApiKey: (header)  (optional)
     - returns: RequestBuilder<GetUserCards200Response> 
     */
    open class func getUserCardsWithRequestBuilder(userId: String, xApiKey: String? = nil) -> RequestBuilder<GetUserCards200Response> {
        var localVariablePath = "/users/{user_id}/cards"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserCards200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get User Information
     
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserInformation(xApiKey: String? = nil, authorization: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: GetUserInformation200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserInformationWithRequestBuilder(xApiKey: xApiKey, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get User Information
     - GET /users/me
     - Get User Information
     - Bearer Token:
       - type: http
       - name: Authorization
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - returns: RequestBuilder<GetUserInformation200Response> 
     */
    open class func getUserInformationWithRequestBuilder(xApiKey: String? = nil, authorization: String? = nil) -> RequestBuilder<GetUserInformation200Response> {
        let localVariablePath = "/users/me"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserInformation200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Login con OTP
     
     - parameter loginWithOtpRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func loginWithOtp(loginWithOtpRequest: LoginWithOtpRequest? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: LoginWithOtp200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return loginWithOtpWithRequestBuilder(loginWithOtpRequest: loginWithOtpRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Login con OTP
     - POST /users/login
     - Permite iniciar sesión con el código OTP enviado al correo o al teléfono del usuario. **Esto se debe especificar en el query param.** 
     - parameter loginWithOtpRequest: (body)  (optional)
     - returns: RequestBuilder<LoginWithOtp200Response> 
     */
    open class func loginWithOtpWithRequestBuilder(loginWithOtpRequest: LoginWithOtpRequest? = nil) -> RequestBuilder<LoginWithOtp200Response> {
        let localVariablePath = "/users/login"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginWithOtpRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LoginWithOtp200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Actualizar dirección
     
     - parameter userId: (path)  
     - parameter addressId: (path)  
     - parameter authorization: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchUserAddress(userId: String, addressId: String, authorization: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return patchUserAddressWithRequestBuilder(userId: userId, addressId: addressId, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Actualizar dirección
     - PATCH /users/{user_id}/addresses/{address_id}
     - Permite actualizar los datos de una dirección mediante el id del mismo
     - Bearer Token:
       - type: http
       - name: Authorization
     - parameter userId: (path)  
     - parameter addressId: (path)  
     - parameter authorization: (header)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func patchUserAddressWithRequestBuilder(userId: String, addressId: String, authorization: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/users/{user_id}/addresses/{address_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let addressIdPreEscape = "\(APIHelper.mapValueToPathItem(addressId))"
        let addressIdPostEscape = addressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{address_id}", with: addressIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = DeUnaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Register User
     
     - parameter registerUserRequest: (body) Ejemplo de requestBody 
     - parameter xApiKey: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func registerUser(registerUserRequest: RegisterUserRequest, xApiKey: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: RegisterUser200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return registerUserWithRequestBuilder(registerUserRequest: registerUserRequest, xApiKey: xApiKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Register User
     - POST /users/signup
     - Allow register user
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter registerUserRequest: (body) Ejemplo de requestBody 
     - parameter xApiKey: (header)  (optional)
     - returns: RequestBuilder<RegisterUser200Response> 
     */
    open class func registerUserWithRequestBuilder(registerUserRequest: RegisterUserRequest, xApiKey: String? = nil) -> RequestBuilder<RegisterUser200Response> {
        let localVariablePath = "/users/signup"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegisterUser200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Enviar código OTP
     
     - parameter requestOtpRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func requestOtp(requestOtpRequest: RequestOtpRequest? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return requestOtpWithRequestBuilder(requestOtpRequest: requestOtpRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Enviar código OTP
     - POST /users/request-code
     - Enviar el OTP (One time password) al correo o teléfono del usuario. **Esto se debe especificar en el query param.**
     - parameter requestOtpRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func requestOtpWithRequestBuilder(requestOtpRequest: RequestOtpRequest? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/users/request-code"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestOtpRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = DeUnaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Users Exists
     
     - parameter xApiKey: (header)  (optional)
     - parameter email: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userExists(xApiKey: String? = nil, email: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return userExistsWithRequestBuilder(xApiKey: xApiKey, email: email).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Users Exists
     - GET /users
     - Get if user exists
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter xApiKey: (header)  (optional)
     - parameter email: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func userExistsWithRequestBuilder(xApiKey: String? = nil, email: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/users"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "email": (wrappedValue: email?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = DeUnaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Login User
     
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersLoginDeviceFingerprintPost(xApiKey: String? = nil, authorization: String? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: UsersLoginDeviceFingerprintPost200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usersLoginDeviceFingerprintPostWithRequestBuilder(xApiKey: xApiKey, authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Login User
     - POST /users/login/device-fingerprint
     - Login User
     - Bearer Token:
       - type: http
       - name: Authorization
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - returns: RequestBuilder<UsersLoginDeviceFingerprintPost200Response> 
     */
    open class func usersLoginDeviceFingerprintPostWithRequestBuilder(xApiKey: String? = nil, authorization: String? = nil) -> RequestBuilder<UsersLoginDeviceFingerprintPost200Response> {
        let localVariablePath = "/users/login/device-fingerprint"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersLoginDeviceFingerprintPost200Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Registro de usuario
     
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter usersRegisterRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usersRegister(xApiKey: String? = nil, authorization: String? = nil, usersRegisterRequest: UsersRegisterRequest? = nil, apiResponseQueue: DispatchQueue = DeUnaSdkAPI.apiResponseQueue, completion: @escaping ((_ data: UsersRegister201Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usersRegisterWithRequestBuilder(xApiKey: xApiKey, authorization: authorization, usersRegisterRequest: usersRegisterRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Registro de usuario
     - POST /users/register
     - Registrar un usuario de tu comercio, este usuario una vez registrado pertenecera a la Red DEUNA
     - Bearer Token:
       - type: http
       - name: Authorization
     - API Key:
       - type: apiKey X-Api-Key (HEADER)
       - name: X-Api-Key
     - parameter xApiKey: (header)  (optional)
     - parameter authorization: (header)  (optional)
     - parameter usersRegisterRequest: (body)  (optional)
     - returns: RequestBuilder<UsersRegister201Response> 
     */
    open class func usersRegisterWithRequestBuilder(xApiKey: String? = nil, authorization: String? = nil, usersRegisterRequest: UsersRegisterRequest? = nil) -> RequestBuilder<UsersRegister201Response> {
        let localVariablePath = "/users/register"
        let localVariableURLString = DeUnaSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usersRegisterRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Api-Key": xApiKey?.encodeToJSON(),
            "Authorization": authorization?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersRegister201Response>.Type = DeUnaSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
