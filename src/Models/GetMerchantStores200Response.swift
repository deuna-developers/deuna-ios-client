//
// GetMerchantStores200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetMerchantStores200Response: Codable, JSONEncodable, Hashable {

    public var country: String?
    public var currency: String?
    public var id: String?
    public var logoUrl: String?
    public var stores: [GetMerchantStores200ResponseStoresInner]?
    public var termAndConditionsUrl: String?
    public var useDunaSend: Bool?

    public init(country: String? = nil, currency: String? = nil, id: String? = nil, logoUrl: String? = nil, stores: [GetMerchantStores200ResponseStoresInner]? = nil, termAndConditionsUrl: String? = nil, useDunaSend: Bool? = nil) {
        self.country = country
        self.currency = currency
        self.id = id
        self.logoUrl = logoUrl
        self.stores = stores
        self.termAndConditionsUrl = termAndConditionsUrl
        self.useDunaSend = useDunaSend
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case country
        case currency
        case id
        case logoUrl = "logo_url"
        case stores
        case termAndConditionsUrl = "term_and_conditions_url"
        case useDunaSend = "use_duna_send"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(logoUrl, forKey: .logoUrl)
        try container.encodeIfPresent(stores, forKey: .stores)
        try container.encodeIfPresent(termAndConditionsUrl, forKey: .termAndConditionsUrl)
        try container.encodeIfPresent(useDunaSend, forKey: .useDunaSend)
    }
}

