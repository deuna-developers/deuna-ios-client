//
// GetAllMerchants200ResponseDataInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetAllMerchants200ResponseDataInner: Codable, JSONEncodable, Hashable {

    public var createdAt: Date?
    public var deletedAt: String?
    public var ID: String?
    public var updatedAt: Date?
    public var accountNumber: String?
    public var accountType: String?
    public var amplitudeId: String?
    public var apiKey: String?
    public var autoApproveOrderInCore: Bool?
    public var bankName: String?
    public var businessUrl: String?
    public var city: String?
    public var country: String?
    public var currency: String?
    public var domain: String?
    public var gtmId: String?
    public var industry: String?
    public var logo: String?
    public var managedByDuna: Bool?
    public var merchantCategoryCode: String?
    public var merchantEvents: [AnyCodable]?
    public var name: String?
    public var onboardingStep: Int?
    public var orderApiPort: Int?
    public var orderApiUrl: String?
    public var orderPickupApiUrl: String?
    public var pickupTokenUrl: String?
    public var platform: String?
    public var policies: [AnyCodable]?
    public var privacyPoliciesUrl: String?
    public var service: String?
    public var shortName: String?
    public var statusChangesNotificationUrl: String?
    public var storefrontBaseUrl: String?
    public var storefrontPrivateUrl: String?
    public var termAndConditionsUrl: String?
    public var timezone: String?
    public var token: String?
    public var useDunaSend: String?
    public var vendorId: String?

    public init(createdAt: Date? = nil, deletedAt: String? = nil, ID: String? = nil, updatedAt: Date? = nil, accountNumber: String? = nil, accountType: String? = nil, amplitudeId: String? = nil, apiKey: String? = nil, autoApproveOrderInCore: Bool? = nil, bankName: String? = nil, businessUrl: String? = nil, city: String? = nil, country: String? = nil, currency: String? = nil, domain: String? = nil, gtmId: String? = nil, industry: String? = nil, logo: String? = nil, managedByDuna: Bool? = nil, merchantCategoryCode: String? = nil, merchantEvents: [AnyCodable]? = nil, name: String? = nil, onboardingStep: Int? = nil, orderApiPort: Int? = nil, orderApiUrl: String? = nil, orderPickupApiUrl: String? = nil, pickupTokenUrl: String? = nil, platform: String? = nil, policies: [AnyCodable]? = nil, privacyPoliciesUrl: String? = nil, service: String? = nil, shortName: String? = nil, statusChangesNotificationUrl: String? = nil, storefrontBaseUrl: String? = nil, storefrontPrivateUrl: String? = nil, termAndConditionsUrl: String? = nil, timezone: String? = nil, token: String? = nil, useDunaSend: String? = nil, vendorId: String? = nil) {
        self.createdAt = createdAt
        self.deletedAt = deletedAt
        self.ID = ID
        self.updatedAt = updatedAt
        self.accountNumber = accountNumber
        self.accountType = accountType
        self.amplitudeId = amplitudeId
        self.apiKey = apiKey
        self.autoApproveOrderInCore = autoApproveOrderInCore
        self.bankName = bankName
        self.businessUrl = businessUrl
        self.city = city
        self.country = country
        self.currency = currency
        self.domain = domain
        self.gtmId = gtmId
        self.industry = industry
        self.logo = logo
        self.managedByDuna = managedByDuna
        self.merchantCategoryCode = merchantCategoryCode
        self.merchantEvents = merchantEvents
        self.name = name
        self.onboardingStep = onboardingStep
        self.orderApiPort = orderApiPort
        self.orderApiUrl = orderApiUrl
        self.orderPickupApiUrl = orderPickupApiUrl
        self.pickupTokenUrl = pickupTokenUrl
        self.platform = platform
        self.policies = policies
        self.privacyPoliciesUrl = privacyPoliciesUrl
        self.service = service
        self.shortName = shortName
        self.statusChangesNotificationUrl = statusChangesNotificationUrl
        self.storefrontBaseUrl = storefrontBaseUrl
        self.storefrontPrivateUrl = storefrontPrivateUrl
        self.termAndConditionsUrl = termAndConditionsUrl
        self.timezone = timezone
        self.token = token
        self.useDunaSend = useDunaSend
        self.vendorId = vendorId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "CreatedAt"
        case deletedAt = "DeletedAt"
        case ID
        case updatedAt = "UpdatedAt"
        case accountNumber = "account_number"
        case accountType = "account_type"
        case amplitudeId = "amplitude_id"
        case apiKey = "api_key"
        case autoApproveOrderInCore = "auto_approve_order_in_core"
        case bankName = "bank_name"
        case businessUrl = "business_url"
        case city
        case country
        case currency
        case domain
        case gtmId = "gtm_id"
        case industry
        case logo
        case managedByDuna = "managed_by_duna"
        case merchantCategoryCode = "merchant_category_code"
        case merchantEvents = "merchant_events"
        case name
        case onboardingStep = "onboarding_step"
        case orderApiPort = "order_api_port"
        case orderApiUrl = "order_api_url"
        case orderPickupApiUrl = "order_pickup_api_url"
        case pickupTokenUrl = "pickup_token_url"
        case platform
        case policies
        case privacyPoliciesUrl = "privacy_policies_url"
        case service
        case shortName = "short_name"
        case statusChangesNotificationUrl = "status_changes_notification_url"
        case storefrontBaseUrl = "storefront_base_url"
        case storefrontPrivateUrl = "storefront_private_url"
        case termAndConditionsUrl = "term_and_conditions_url"
        case timezone
        case token
        case useDunaSend = "use_duna_send"
        case vendorId = "vendor_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encodeIfPresent(ID, forKey: .ID)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(accountNumber, forKey: .accountNumber)
        try container.encodeIfPresent(accountType, forKey: .accountType)
        try container.encodeIfPresent(amplitudeId, forKey: .amplitudeId)
        try container.encodeIfPresent(apiKey, forKey: .apiKey)
        try container.encodeIfPresent(autoApproveOrderInCore, forKey: .autoApproveOrderInCore)
        try container.encodeIfPresent(bankName, forKey: .bankName)
        try container.encodeIfPresent(businessUrl, forKey: .businessUrl)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(gtmId, forKey: .gtmId)
        try container.encodeIfPresent(industry, forKey: .industry)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(managedByDuna, forKey: .managedByDuna)
        try container.encodeIfPresent(merchantCategoryCode, forKey: .merchantCategoryCode)
        try container.encodeIfPresent(merchantEvents, forKey: .merchantEvents)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(onboardingStep, forKey: .onboardingStep)
        try container.encodeIfPresent(orderApiPort, forKey: .orderApiPort)
        try container.encodeIfPresent(orderApiUrl, forKey: .orderApiUrl)
        try container.encodeIfPresent(orderPickupApiUrl, forKey: .orderPickupApiUrl)
        try container.encodeIfPresent(pickupTokenUrl, forKey: .pickupTokenUrl)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(policies, forKey: .policies)
        try container.encodeIfPresent(privacyPoliciesUrl, forKey: .privacyPoliciesUrl)
        try container.encodeIfPresent(service, forKey: .service)
        try container.encodeIfPresent(shortName, forKey: .shortName)
        try container.encodeIfPresent(statusChangesNotificationUrl, forKey: .statusChangesNotificationUrl)
        try container.encodeIfPresent(storefrontBaseUrl, forKey: .storefrontBaseUrl)
        try container.encodeIfPresent(storefrontPrivateUrl, forKey: .storefrontPrivateUrl)
        try container.encodeIfPresent(termAndConditionsUrl, forKey: .termAndConditionsUrl)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(useDunaSend, forKey: .useDunaSend)
        try container.encodeIfPresent(vendorId, forKey: .vendorId)
    }
}

