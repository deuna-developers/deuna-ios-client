//
// OrderTokenRequestOrderShippingMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Método de envío */
public struct OrderTokenRequestOrderShippingMethod: Codable, JSONEncodable, Hashable {

    /** código método de envío */
    public var code: String?
    /** Costo de envío */
    public var cost: Double?
    /** Costo de envío que se mostrara en el checkout  */
    public var displayCost: String?
    /** Monto de impuestos del envío que se mostrara en el checkout */
    public var displayTaxAmount: String?
    /** Fecha máxima de delivery */
    public var maxDeliveryDate: String?
    /** Fecha más cercana al delivery */
    public var minDeliveryDate: String?
    /** Nombre del método de envío */
    public var name: String?
    /** Se usa para configurar un envío programado */
    public var scheduler: [OrderTokenRequestOrderShippingMethodSchedulerInner]?
    /** Monto de impuestos del envío */
    public var taxAmount: Double?

    public init(code: String? = nil, cost: Double? = nil, displayCost: String? = nil, displayTaxAmount: String? = nil, maxDeliveryDate: String? = nil, minDeliveryDate: String? = nil, name: String? = nil, scheduler: [OrderTokenRequestOrderShippingMethodSchedulerInner]? = nil, taxAmount: Double? = nil) {
        self.code = code
        self.cost = cost
        self.displayCost = displayCost
        self.displayTaxAmount = displayTaxAmount
        self.maxDeliveryDate = maxDeliveryDate
        self.minDeliveryDate = minDeliveryDate
        self.name = name
        self.scheduler = scheduler
        self.taxAmount = taxAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case cost
        case displayCost = "display_cost"
        case displayTaxAmount = "display_tax_amount"
        case maxDeliveryDate = "max_delivery_date"
        case minDeliveryDate = "min_delivery_date"
        case name
        case scheduler
        case taxAmount = "tax_amount"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(cost, forKey: .cost)
        try container.encodeIfPresent(displayCost, forKey: .displayCost)
        try container.encodeIfPresent(displayTaxAmount, forKey: .displayTaxAmount)
        try container.encodeIfPresent(maxDeliveryDate, forKey: .maxDeliveryDate)
        try container.encodeIfPresent(minDeliveryDate, forKey: .minDeliveryDate)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(scheduler, forKey: .scheduler)
        try container.encodeIfPresent(taxAmount, forKey: .taxAmount)
    }
}

