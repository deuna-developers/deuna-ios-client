//
// OrderTokenRequestOrderPaymentData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Datos del pago */
public struct OrderTokenRequestOrderPaymentData: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case processed = "processed"
        case processing = "processing"
        case pending = "pending"
        case denied = "denied"
        case cancelled = "cancelled"
        case void = "void"
        case refunded = "refunded"
    }
    public var amount: OrderTokenRequestOrderPaymentDataAmount?
    /** Fecha de creación */
    public var createdAt: String?
    public var customer: OrderTokenRequestOrderPaymentDataCustomer?
    public var fromCard: OrderTokenRequestOrderPaymentDataFromCard?
    public var id: String?
    public var merchant: OrderTokenRequestOrderPaymentDataMerchant?
    public var metadata: AnyCodable?
    /** Método de pago */
    public var methodType: String?
    /** Procesador de pago */
    public var processor: String?
    public var reason: String?
    /** Estado del pago */
    public var status: Status?
    public var updatedAt: String?

    public init(amount: OrderTokenRequestOrderPaymentDataAmount? = nil, createdAt: String? = nil, customer: OrderTokenRequestOrderPaymentDataCustomer? = nil, fromCard: OrderTokenRequestOrderPaymentDataFromCard? = nil, id: String? = nil, merchant: OrderTokenRequestOrderPaymentDataMerchant? = nil, metadata: AnyCodable? = nil, methodType: String? = nil, processor: String? = nil, reason: String? = nil, status: Status? = nil, updatedAt: String? = nil) {
        self.amount = amount
        self.createdAt = createdAt
        self.customer = customer
        self.fromCard = fromCard
        self.id = id
        self.merchant = merchant
        self.metadata = metadata
        self.methodType = methodType
        self.processor = processor
        self.reason = reason
        self.status = status
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case createdAt = "created_at"
        case customer
        case fromCard = "from_card"
        case id
        case merchant
        case metadata
        case methodType = "method_type"
        case processor
        case reason
        case status
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(customer, forKey: .customer)
        try container.encodeIfPresent(fromCard, forKey: .fromCard)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(merchant, forKey: .merchant)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(methodType, forKey: .methodType)
        try container.encodeIfPresent(processor, forKey: .processor)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

