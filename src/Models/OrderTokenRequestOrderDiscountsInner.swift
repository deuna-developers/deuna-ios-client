//
// OrderTokenRequestOrderDiscountsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderTokenRequestOrderDiscountsInner: Codable, JSONEncodable, Hashable {

    public enum TargetType: String, Codable, CaseIterable {
        case shipping = "shipping"
        case item = "item"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case freeShipping = "free_shipping"
        case orderValue = "order_value"
        case product = "product"
    }
    static let codeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let descriptionRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let detailsUrlRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let discountCategoryRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let referenceRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let targetTypeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** El monto total del descuento de la orden. Deberá estar expresado en centavos, por ejemplo si el monto es $10.00 estará representado como 1000 lo que significa 10 dólares 0 centavos. */
    public var amount: Double
    /** El código del descuento que se aplicara en la orden */
    public var code: String
    /** La descripción del descuento */
    public var description: String?
    /** URL del descuento */
    public var detailsUrl: String?
    /** Categoría del descuento */
    public var discountCategory: String?
    public var freeShipping: OrderTokenRequestOrderDiscountsInnerFreeShipping?
    /** Referencia del descuento */
    public var reference: String?
    /** Componente donde se aplicó el descuento */
    public var targetType: TargetType?
    /** Tipo del descuento aplicado */
    public var type: ModelType?

    public init(amount: Double, code: String, description: String? = nil, detailsUrl: String? = nil, discountCategory: String? = nil, freeShipping: OrderTokenRequestOrderDiscountsInnerFreeShipping? = nil, reference: String? = nil, targetType: TargetType? = nil, type: ModelType? = nil) {
        self.amount = amount
        self.code = code
        self.description = description
        self.detailsUrl = detailsUrl
        self.discountCategory = discountCategory
        self.freeShipping = freeShipping
        self.reference = reference
        self.targetType = targetType
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case code
        case description
        case detailsUrl = "details_url"
        case discountCategory = "discount_category"
        case freeShipping = "free_shipping"
        case reference
        case targetType = "target_type"
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(amount, forKey: .amount)
        try container.encode(code, forKey: .code)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(detailsUrl, forKey: .detailsUrl)
        try container.encodeIfPresent(discountCategory, forKey: .discountCategory)
        try container.encodeIfPresent(freeShipping, forKey: .freeShipping)
        try container.encodeIfPresent(reference, forKey: .reference)
        try container.encodeIfPresent(targetType, forKey: .targetType)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

