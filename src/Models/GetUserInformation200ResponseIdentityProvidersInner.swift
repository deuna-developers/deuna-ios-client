//
// GetUserInformation200ResponseIdentityProvidersInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetUserInformation200ResponseIdentityProvidersInner: Codable, JSONEncodable, Hashable {

    static let createdAtRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let providerNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let updatedAtRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var createdAt: String?
    public var deletedAt: AnyCodable?
    public var id: Int?
    public var providerName: String?
    public var updatedAt: String?

    public init(createdAt: String? = nil, deletedAt: AnyCodable? = nil, id: Int? = nil, providerName: String? = nil, updatedAt: String? = nil) {
        self.createdAt = createdAt
        self.deletedAt = deletedAt
        self.id = id
        self.providerName = providerName
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case deletedAt = "deleted_at"
        case id
        case providerName = "provider_name"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(providerName, forKey: .providerName)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

