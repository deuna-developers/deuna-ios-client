//
// OrderTokenRequestOrderItemsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Detalle del producto */
public struct OrderTokenRequestOrderItemsInner: Codable, JSONEncodable, Hashable {

    static let brandRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let categoryRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let colorRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let descriptionRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let detailsUrlRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let idRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let imageUrlRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let isbnRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let manufacturerRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let optionsRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let sizeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let skuRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let uomRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let upcRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** Marca del producto */
    public var brand: String?
    /** Categoría del producto */
    public var category: String?
    /** Color del producto */
    public var color: String?
    /** Descripción del producto */
    public var description: String
    /** URL del producto dentro en la página del comercio */
    public var detailsUrl: String?
    /** Referencia de los descuentos aplicados en la orden */
    public var discounts: Set<OrderTokenRequestOrderItemsInnerDiscountsInner>?
    /** Identificador del producto del comercio */
    public var id: String
    /** URL donde se encuentra alojada la imagen del producto  */
    public var imageUrl: String?
    /** Sistema internacional de numeración de libros (International Standard Book Number) */
    public var isbn: String?
    /** Fabricante del producto */
    public var manufacturer: String?
    /** Nombre del producto */
    public var name: String
    public var options: String?
    /** Es la cantidad del producto que comprara el usuario */
    public var quantity: Double
    /** Tamaño del producto */
    public var size: String?
    /** Número de referencia único (Stock Keeping Unit) */
    public var sku: String?
    public var taxAmount: OrderTokenRequestOrderItemsInnerTaxAmount?
    /** Si es que el producto aplica algún impuesto */
    public var taxable: Bool? = false
    public var totalAmount: OrderTokenRequestOrderItemsInnerTotalAmount
    public var unitPrice: OrderTokenRequestOrderItemsInnerUnitPrice
    /** Unidad de medida (Unit of Measure) */
    public var uom: String?
    /** Código universal del producto (Universal Product Code) */
    public var upc: String?
    public var weight: OrderTokenRequestOrderItemsInnerWeight?

    public init(brand: String? = nil, category: String? = nil, color: String? = nil, description: String, detailsUrl: String? = nil, discounts: Set<OrderTokenRequestOrderItemsInnerDiscountsInner>? = nil, id: String, imageUrl: String? = nil, isbn: String? = nil, manufacturer: String? = nil, name: String, options: String? = nil, quantity: Double, size: String? = nil, sku: String? = nil, taxAmount: OrderTokenRequestOrderItemsInnerTaxAmount? = nil, taxable: Bool? = false, totalAmount: OrderTokenRequestOrderItemsInnerTotalAmount, unitPrice: OrderTokenRequestOrderItemsInnerUnitPrice, uom: String? = nil, upc: String? = nil, weight: OrderTokenRequestOrderItemsInnerWeight? = nil) {
        self.brand = brand
        self.category = category
        self.color = color
        self.description = description
        self.detailsUrl = detailsUrl
        self.discounts = discounts
        self.id = id
        self.imageUrl = imageUrl
        self.isbn = isbn
        self.manufacturer = manufacturer
        self.name = name
        self.options = options
        self.quantity = quantity
        self.size = size
        self.sku = sku
        self.taxAmount = taxAmount
        self.taxable = taxable
        self.totalAmount = totalAmount
        self.unitPrice = unitPrice
        self.uom = uom
        self.upc = upc
        self.weight = weight
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case brand
        case category
        case color
        case description
        case detailsUrl = "details_url"
        case discounts
        case id
        case imageUrl = "image_url"
        case isbn
        case manufacturer
        case name
        case options
        case quantity
        case size
        case sku
        case taxAmount = "tax_amount"
        case taxable
        case totalAmount = "total_amount"
        case unitPrice = "unit_price"
        case uom
        case upc
        case weight
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(brand, forKey: .brand)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(color, forKey: .color)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(detailsUrl, forKey: .detailsUrl)
        try container.encodeIfPresent(discounts, forKey: .discounts)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(imageUrl, forKey: .imageUrl)
        try container.encodeIfPresent(isbn, forKey: .isbn)
        try container.encodeIfPresent(manufacturer, forKey: .manufacturer)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(options, forKey: .options)
        try container.encode(quantity, forKey: .quantity)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(sku, forKey: .sku)
        try container.encodeIfPresent(taxAmount, forKey: .taxAmount)
        try container.encodeIfPresent(taxable, forKey: .taxable)
        try container.encode(totalAmount, forKey: .totalAmount)
        try container.encode(unitPrice, forKey: .unitPrice)
        try container.encodeIfPresent(uom, forKey: .uom)
        try container.encodeIfPresent(upc, forKey: .upc)
        try container.encodeIfPresent(weight, forKey: .weight)
    }
}

