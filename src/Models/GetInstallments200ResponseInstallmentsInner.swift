//
// GetInstallments200ResponseInstallmentsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetInstallments200ResponseInstallmentsInner: Codable, JSONEncodable, Hashable {

    public var discountRate: Int?
    public var displayInstallmentsAmount: String?
    public var displayInstallmentsRate: String?
    public var installmentRate: Int?
    public var installmentRateCollector: [AnyCodable]?
    public var installments: Int?
    public var installmentsAmount: Int?

    public init(discountRate: Int? = nil, displayInstallmentsAmount: String? = nil, displayInstallmentsRate: String? = nil, installmentRate: Int? = nil, installmentRateCollector: [AnyCodable]? = nil, installments: Int? = nil, installmentsAmount: Int? = nil) {
        self.discountRate = discountRate
        self.displayInstallmentsAmount = displayInstallmentsAmount
        self.displayInstallmentsRate = displayInstallmentsRate
        self.installmentRate = installmentRate
        self.installmentRateCollector = installmentRateCollector
        self.installments = installments
        self.installmentsAmount = installmentsAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case discountRate = "discount_rate"
        case displayInstallmentsAmount = "display_installments_amount"
        case displayInstallmentsRate = "display_installments_rate"
        case installmentRate = "installment_rate"
        case installmentRateCollector = "installment_rate_collector"
        case installments
        case installmentsAmount = "installments_amount"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(discountRate, forKey: .discountRate)
        try container.encodeIfPresent(displayInstallmentsAmount, forKey: .displayInstallmentsAmount)
        try container.encodeIfPresent(displayInstallmentsRate, forKey: .displayInstallmentsRate)
        try container.encodeIfPresent(installmentRate, forKey: .installmentRate)
        try container.encodeIfPresent(installmentRateCollector, forKey: .installmentRateCollector)
        try container.encodeIfPresent(installments, forKey: .installments)
        try container.encodeIfPresent(installmentsAmount, forKey: .installmentsAmount)
    }
}

