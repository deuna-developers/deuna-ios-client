//
// MerchantsApplicationsValidateGet200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct MerchantsApplicationsValidateGet200Response: Codable, JSONEncodable, Hashable {

    static let keyTypeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let merchantIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let statusRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var isSandbox: Bool?
    public var keyType: String?
    public var merchantId: String?
    public var name: String?
    public var status: String?

    public init(isSandbox: Bool? = nil, keyType: String? = nil, merchantId: String? = nil, name: String? = nil, status: String? = nil) {
        self.isSandbox = isSandbox
        self.keyType = keyType
        self.merchantId = merchantId
        self.name = name
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case isSandbox = "is_sandbox"
        case keyType = "key_type"
        case merchantId = "merchant_id"
        case name
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(isSandbox, forKey: .isSandbox)
        try container.encodeIfPresent(keyType, forKey: .keyType)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
    }
}

