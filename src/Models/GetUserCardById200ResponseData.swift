//
// GetUserCardById200ResponseData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct GetUserCardById200ResponseData: Codable, JSONEncodable, Hashable {

    static let cardHolderRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let cardHolderDniRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let companyRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let deletedAtRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let expirationDateRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let firstSixRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let idRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let lastFourRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let verifiedAtRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let verifiedByRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var cardHolder: String?
    public var cardHolderDni: String?
    public var company: String?
    public var deletedAt: String?
    public var expirationDate: String?
    public var firstSix: String?
    public var id: String?
    public var isValid: Bool?
    public var lastFour: String?
    public var verifiedAt: String?
    public var verifiedBy: String?

    public init(cardHolder: String? = nil, cardHolderDni: String? = nil, company: String? = nil, deletedAt: String? = nil, expirationDate: String? = nil, firstSix: String? = nil, id: String? = nil, isValid: Bool? = nil, lastFour: String? = nil, verifiedAt: String? = nil, verifiedBy: String? = nil) {
        self.cardHolder = cardHolder
        self.cardHolderDni = cardHolderDni
        self.company = company
        self.deletedAt = deletedAt
        self.expirationDate = expirationDate
        self.firstSix = firstSix
        self.id = id
        self.isValid = isValid
        self.lastFour = lastFour
        self.verifiedAt = verifiedAt
        self.verifiedBy = verifiedBy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cardHolder = "card_holder"
        case cardHolderDni = "card_holder_dni"
        case company
        case deletedAt = "deleted_at"
        case expirationDate = "expiration_date"
        case firstSix = "first_six"
        case id
        case isValid = "is_valid"
        case lastFour = "last_four"
        case verifiedAt = "verified_at"
        case verifiedBy = "verified_by"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cardHolder, forKey: .cardHolder)
        try container.encodeIfPresent(cardHolderDni, forKey: .cardHolderDni)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encodeIfPresent(expirationDate, forKey: .expirationDate)
        try container.encodeIfPresent(firstSix, forKey: .firstSix)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(isValid, forKey: .isValid)
        try container.encodeIfPresent(lastFour, forKey: .lastFour)
        try container.encodeIfPresent(verifiedAt, forKey: .verifiedAt)
        try container.encodeIfPresent(verifiedBy, forKey: .verifiedBy)
    }
}

