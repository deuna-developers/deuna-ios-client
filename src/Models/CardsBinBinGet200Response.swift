//
// CardsBinBinGet200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct CardsBinBinGet200Response: Codable, JSONEncodable, Hashable {

    static let bankRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let binRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let branchRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let cardTypeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let countryRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let currencyRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var bank: String?
    public var bin: String?
    public var branch: String?
    public var cardType: String?
    public var country: String?
    public var countryIso: Bool?
    public var currency: String?

    public init(bank: String? = nil, bin: String? = nil, branch: String? = nil, cardType: String? = nil, country: String? = nil, countryIso: Bool? = nil, currency: String? = nil) {
        self.bank = bank
        self.bin = bin
        self.branch = branch
        self.cardType = cardType
        self.country = country
        self.countryIso = countryIso
        self.currency = currency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bank
        case bin
        case branch
        case cardType = "card_type"
        case country
        case countryIso = "country_iso"
        case currency
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bank, forKey: .bank)
        try container.encodeIfPresent(bin, forKey: .bin)
        try container.encodeIfPresent(branch, forKey: .branch)
        try container.encodeIfPresent(cardType, forKey: .cardType)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(countryIso, forKey: .countryIso)
        try container.encodeIfPresent(currency, forKey: .currency)
    }
}

