//
// PostUsersUserIdCardsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PostUsersUserIdCardsRequest: Codable, JSONEncodable, Hashable {

    /** Dirección del tarjetahabiente */
    public var address1: String?
    /** Código de validación de la tarjeta */
    public var cardCvv: String
    /** Nombre del tarjetahabiente */
    public var cardHolder: String
    /** Número de identificación del tarjetahabiente */
    public var cardHolderDni: String
    /** Número de la tarjeta */
    public var cardNumber: String
    public var cardVerificationConfig: PostUsersUserIdCardsRequestCardVerificationConfig?
    /** Ciudad de la dirección del tarjetahabiente */
    public var city: String?
    /** País de la dirección del tarjetahabiente */
    public var country: String?
    /** Mes de expiración de la tarjeta en 2 dígitos */
    public var expiryMonth: String
    /** Año de expiración de la tarjeta en 4 dígitos */
    public var expiryYear: String
    /** Número de teléfono del tarjetahabiente */
    public var phone: String?
    /** Estado de la dirección del tarjetahabiente */
    public var state: String?
    /** Código postal de la dirección del tarjetahabiente */
    public var zip: String?

    public init(address1: String? = nil, cardCvv: String, cardHolder: String, cardHolderDni: String, cardNumber: String, cardVerificationConfig: PostUsersUserIdCardsRequestCardVerificationConfig? = nil, city: String? = nil, country: String? = nil, expiryMonth: String, expiryYear: String, phone: String? = nil, state: String? = nil, zip: String? = nil) {
        self.address1 = address1
        self.cardCvv = cardCvv
        self.cardHolder = cardHolder
        self.cardHolderDni = cardHolderDni
        self.cardNumber = cardNumber
        self.cardVerificationConfig = cardVerificationConfig
        self.city = city
        self.country = country
        self.expiryMonth = expiryMonth
        self.expiryYear = expiryYear
        self.phone = phone
        self.state = state
        self.zip = zip
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address1
        case cardCvv = "card_cvv"
        case cardHolder = "card_holder"
        case cardHolderDni = "card_holder_dni"
        case cardNumber = "card_number"
        case cardVerificationConfig = "card_verification_config"
        case city
        case country
        case expiryMonth = "expiry_month"
        case expiryYear = "expiry_year"
        case phone
        case state
        case zip
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encode(cardCvv, forKey: .cardCvv)
        try container.encode(cardHolder, forKey: .cardHolder)
        try container.encode(cardHolderDni, forKey: .cardHolderDni)
        try container.encode(cardNumber, forKey: .cardNumber)
        try container.encodeIfPresent(cardVerificationConfig, forKey: .cardVerificationConfig)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encode(expiryMonth, forKey: .expiryMonth)
        try container.encode(expiryYear, forKey: .expiryYear)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(zip, forKey: .zip)
    }
}

