//
// CreateAddress200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateAddress200Response: Codable, JSONEncodable, Hashable {

    /** Descripción adicional */
    public var additionalDescription: String?
    /** Dirección del usuario */
    public var address1: String?
    /** Dirección del usuario */
    public var address2: String?
    /** Tipo de dirección */
    public var addressType: String?
    /** Ciudad de la dirección */
    public var city: String?
    /** País de la dirección */
    public var country: String?
    /** Fecha de creación de la dirección */
    public var createdAt: String?
    /** Correo del usuario */
    public var email: String?
    /** Nombre del usuario */
    public var firstName: String?
    /** Identificador de la dirección del usuario */
    public var id: Int?
    /** Documento de identidad del usuario */
    public var identityDocument: String?
    /** Si la dirección es de facturación */
    public var isBillingAddress: Bool?
    /** Si la dirección es por defecto */
    public var isDefault: Bool?
    /** Apellido del usuario */
    public var lastName: String?
    /** Latitud de la dirección */
    public var lat: Double?
    /** Longitud de la dirección */
    public var lng: Double?
    /** Teléfono del usuario */
    public var phone: String?
    public var stateCode: String?
    /** Estado de la dirección */
    public var stateName: String?
    /** Fecha de actualización de la dirección */
    public var updatedAt: String?
    /** Identificador del usuario */
    public var userId: String?
    /** Código postal de la dirección */
    public var zipcode: String?

    public init(additionalDescription: String? = nil, address1: String? = nil, address2: String? = nil, addressType: String? = nil, city: String? = nil, country: String? = nil, createdAt: String? = nil, email: String? = nil, firstName: String? = nil, id: Int? = nil, identityDocument: String? = nil, isBillingAddress: Bool? = nil, isDefault: Bool? = nil, lastName: String? = nil, lat: Double? = nil, lng: Double? = nil, phone: String? = nil, stateCode: String? = nil, stateName: String? = nil, updatedAt: String? = nil, userId: String? = nil, zipcode: String? = nil) {
        self.additionalDescription = additionalDescription
        self.address1 = address1
        self.address2 = address2
        self.addressType = addressType
        self.city = city
        self.country = country
        self.createdAt = createdAt
        self.email = email
        self.firstName = firstName
        self.id = id
        self.identityDocument = identityDocument
        self.isBillingAddress = isBillingAddress
        self.isDefault = isDefault
        self.lastName = lastName
        self.lat = lat
        self.lng = lng
        self.phone = phone
        self.stateCode = stateCode
        self.stateName = stateName
        self.updatedAt = updatedAt
        self.userId = userId
        self.zipcode = zipcode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case additionalDescription = "additional_description"
        case address1
        case address2
        case addressType = "address_type"
        case city
        case country
        case createdAt = "created_at"
        case email
        case firstName = "first_name"
        case id
        case identityDocument = "identity_document"
        case isBillingAddress = "is_billing_address"
        case isDefault = "is_default"
        case lastName = "last_name"
        case lat
        case lng
        case phone
        case stateCode = "state_code"
        case stateName = "state_name"
        case updatedAt = "updated_at"
        case userId = "user_id"
        case zipcode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(additionalDescription, forKey: .additionalDescription)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(addressType, forKey: .addressType)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(identityDocument, forKey: .identityDocument)
        try container.encodeIfPresent(isBillingAddress, forKey: .isBillingAddress)
        try container.encodeIfPresent(isDefault, forKey: .isDefault)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(lat, forKey: .lat)
        try container.encodeIfPresent(lng, forKey: .lng)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(stateCode, forKey: .stateCode)
        try container.encodeIfPresent(stateName, forKey: .stateName)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(zipcode, forKey: .zipcode)
    }
}

