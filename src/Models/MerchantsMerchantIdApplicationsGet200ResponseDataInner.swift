//
// MerchantsMerchantIdApplicationsGet200ResponseDataInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MerchantsMerchantIdApplicationsGet200ResponseDataInner: Codable, JSONEncodable, Hashable {

    static let channelRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let createdAtRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let idRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let statusRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let updatedAtRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var channel: String?
    public var createdAt: String
    public var id: String
    public var isSandbox: Bool
    public var name: String
    public var status: String
    public var updatedAt: String

    public init(channel: String? = nil, createdAt: String, id: String, isSandbox: Bool, name: String, status: String, updatedAt: String) {
        self.channel = channel
        self.createdAt = createdAt
        self.id = id
        self.isSandbox = isSandbox
        self.name = name
        self.status = status
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channel
        case createdAt = "created_at"
        case id
        case isSandbox = "is_sandbox"
        case name
        case status
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(channel, forKey: .channel)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(id, forKey: .id)
        try container.encode(isSandbox, forKey: .isSandbox)
        try container.encode(name, forKey: .name)
        try container.encode(status, forKey: .status)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

