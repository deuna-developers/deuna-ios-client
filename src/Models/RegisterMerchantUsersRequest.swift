//
// RegisterMerchantUsersRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct RegisterMerchantUsersRequest: Codable, JSONEncodable, Hashable {

    static let emailRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let merchantIdRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let passwordRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let phoneRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let roleRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var email: String?
    public var merchantId: String?
    public var name: String?
    public var password: String?
    public var phone: String?
    public var role: String?

    public init(email: String? = nil, merchantId: String? = nil, name: String? = nil, password: String? = nil, phone: String? = nil, role: String? = nil) {
        self.email = email
        self.merchantId = merchantId
        self.name = name
        self.password = password
        self.phone = phone
        self.role = role
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case merchantId = "merchant_id"
        case name
        case password
        case phone
        case role
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(role, forKey: .role)
    }
}

