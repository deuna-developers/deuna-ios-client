//
// UpdateMerchantRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateMerchantRequest: Codable, JSONEncodable, Hashable {

    public var amplitudeId: String?
    public var autoApproveOrderInCore: Bool?
    public var city: String?
    public var country: String?
    public var domain: String?
    public var gtmId: String?
    public var logo: String?
    public var managedByDuna: Bool?
    public var name: String?
    public var orderApiPort: Int?
    public var orderApiUrl: String?
    public var shortName: String?
    public var statusChangesNotificationUrl: String?
    public var storefrontBaseUrl: String?
    public var storefrontPrivateUrl: String?
    public var timezone: String?
    public var token: String?
    public var useDunaSend: Bool?

    public init(amplitudeId: String? = nil, autoApproveOrderInCore: Bool? = nil, city: String? = nil, country: String? = nil, domain: String? = nil, gtmId: String? = nil, logo: String? = nil, managedByDuna: Bool? = nil, name: String? = nil, orderApiPort: Int? = nil, orderApiUrl: String? = nil, shortName: String? = nil, statusChangesNotificationUrl: String? = nil, storefrontBaseUrl: String? = nil, storefrontPrivateUrl: String? = nil, timezone: String? = nil, token: String? = nil, useDunaSend: Bool? = nil) {
        self.amplitudeId = amplitudeId
        self.autoApproveOrderInCore = autoApproveOrderInCore
        self.city = city
        self.country = country
        self.domain = domain
        self.gtmId = gtmId
        self.logo = logo
        self.managedByDuna = managedByDuna
        self.name = name
        self.orderApiPort = orderApiPort
        self.orderApiUrl = orderApiUrl
        self.shortName = shortName
        self.statusChangesNotificationUrl = statusChangesNotificationUrl
        self.storefrontBaseUrl = storefrontBaseUrl
        self.storefrontPrivateUrl = storefrontPrivateUrl
        self.timezone = timezone
        self.token = token
        self.useDunaSend = useDunaSend
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amplitudeId = "amplitude_id"
        case autoApproveOrderInCore = "auto_approve_order_in_core"
        case city
        case country
        case domain
        case gtmId = "gtm_id"
        case logo
        case managedByDuna = "managed_by_duna"
        case name
        case orderApiPort = "order_api_port"
        case orderApiUrl = "order_api_url"
        case shortName = "short_name"
        case statusChangesNotificationUrl = "status_changes_notification_url"
        case storefrontBaseUrl = "storefront_base_url"
        case storefrontPrivateUrl = "storefront_private_url"
        case timezone
        case token
        case useDunaSend = "use_duna_send"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amplitudeId, forKey: .amplitudeId)
        try container.encodeIfPresent(autoApproveOrderInCore, forKey: .autoApproveOrderInCore)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(gtmId, forKey: .gtmId)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(managedByDuna, forKey: .managedByDuna)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(orderApiPort, forKey: .orderApiPort)
        try container.encodeIfPresent(orderApiUrl, forKey: .orderApiUrl)
        try container.encodeIfPresent(shortName, forKey: .shortName)
        try container.encodeIfPresent(statusChangesNotificationUrl, forKey: .statusChangesNotificationUrl)
        try container.encodeIfPresent(storefrontBaseUrl, forKey: .storefrontBaseUrl)
        try container.encodeIfPresent(storefrontPrivateUrl, forKey: .storefrontPrivateUrl)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(useDunaSend, forKey: .useDunaSend)
    }
}

