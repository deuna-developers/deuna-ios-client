//
// CreateMerchant200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct CreateMerchant200Response: Codable, JSONEncodable, Hashable {

    static let cityRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let countryRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let createdAtRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let currencyRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let idRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let privacyPoliciesUrlRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let shortNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let termAndConditionsUrlRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let timezoneRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let updatedAtRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var city: String?
    public var country: String?
    public var createdAt: String?
    public var currency: String?
    public var id: String?
    public var managedByDuna: Bool?
    public var name: String?
    public var privacyPoliciesUrl: String?
    public var shortName: String?
    public var termAndConditionsUrl: String?
    public var timezone: String?
    public var updatedAt: String?

    public init(city: String? = nil, country: String? = nil, createdAt: String? = nil, currency: String? = nil, id: String? = nil, managedByDuna: Bool? = nil, name: String? = nil, privacyPoliciesUrl: String? = nil, shortName: String? = nil, termAndConditionsUrl: String? = nil, timezone: String? = nil, updatedAt: String? = nil) {
        self.city = city
        self.country = country
        self.createdAt = createdAt
        self.currency = currency
        self.id = id
        self.managedByDuna = managedByDuna
        self.name = name
        self.privacyPoliciesUrl = privacyPoliciesUrl
        self.shortName = shortName
        self.termAndConditionsUrl = termAndConditionsUrl
        self.timezone = timezone
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case city
        case country
        case createdAt = "created_at"
        case currency
        case id
        case managedByDuna = "managed_by_duna"
        case name
        case privacyPoliciesUrl = "privacy_policies_url"
        case shortName = "short_name"
        case termAndConditionsUrl = "term_and_conditions_url"
        case timezone
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(managedByDuna, forKey: .managedByDuna)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(privacyPoliciesUrl, forKey: .privacyPoliciesUrl)
        try container.encodeIfPresent(shortName, forKey: .shortName)
        try container.encodeIfPresent(termAndConditionsUrl, forKey: .termAndConditionsUrl)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

