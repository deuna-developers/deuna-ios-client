//
// MerchantsMerchantIdApplicationsPost200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct MerchantsMerchantIdApplicationsPost200Response: Codable, JSONEncodable, Hashable {

    static let createdAtRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let idRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let privateKeyRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let publicKeyRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let signingSecretRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let statusRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let updatedAtRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var createdAt: String?
    public var id: String?
    public var isSandbox: Bool?
    public var name: String?
    public var privateKey: String?
    public var publicKey: String?
    public var signingSecret: String?
    public var status: String?
    public var updatedAt: String?

    public init(createdAt: String? = nil, id: String? = nil, isSandbox: Bool? = nil, name: String? = nil, privateKey: String? = nil, publicKey: String? = nil, signingSecret: String? = nil, status: String? = nil, updatedAt: String? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.isSandbox = isSandbox
        self.name = name
        self.privateKey = privateKey
        self.publicKey = publicKey
        self.signingSecret = signingSecret
        self.status = status
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case id
        case isSandbox = "is_sandbox"
        case name
        case privateKey = "private_key"
        case publicKey = "public_key"
        case signingSecret = "signing_secret"
        case status
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(isSandbox, forKey: .isSandbox)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(privateKey, forKey: .privateKey)
        try container.encodeIfPresent(publicKey, forKey: .publicKey)
        try container.encodeIfPresent(signingSecret, forKey: .signingSecret)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

